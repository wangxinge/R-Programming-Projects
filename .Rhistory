swirl()
setwd("~/Desktop/R")
swirl()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=T)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,prob=c(0.3,0.7))
flips<-sample(c(0,1),size=100,replace=FALSE,prob=c(0.3,0.7))
flips<-sample(x=c(0,1),size=100,replace=FALSE,prob=c(0.3,0.7))
flips<-sample(x=c(0,1),size=100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips<-rbinom(1,size=100,prob=0.7)
flips<-pbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
rbinom(1,size=100,prob=0.7)
sum(flips2)
?rnorm
rnorm(100)
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5)
rpois(5,lambda = 10)
my_pois<-replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(y = cars$dist, x = cars$speed)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, submain="My Plot")
?plot
plot(cars, sub="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data=mtcars)
boxplot(formula=mpg ~ cyl, data=mtcars)
hist(mtcars$cyl)
hist(mtcars$mpg)
system.time(mean(c(1,2,3,4)))
set.seed(1)
rpois(5,2)
?set.seed
library(datasets)
Rprof()
fit<-lm(y~x1+x2)
Rprof(NULL)
x1<-1
x2<-2
fit<-lm(y~x1+x2)
y<-4
fit<-lm(y~x1+x2)
summaryRprof()
summaryRprof(lm)
summaryRprof(Rprof(lm))
summaryRprof(Rprof(lm(y~x1+x2)))
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
outcome<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
outcome<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
sum(is.na(outcome[,11]))
nrow(outcome)
sum(is.na(outcome[,4]))
str(outcome$State)
sum(!is.na(outcome["AL",11]))
levels(outcome$State)
table(outcome$State)
sum(!is.na(outcome["GU",11]))
!is.na(outcome["GU",11])
!is.na(outcome["IL",11])
outcome["IL",11]
outcome["IL",11]
outcome[IL,11]
outcome["IL",1:3]
outcome$State=="IL"
[outcome$State=="IL",11]
outcome[outcome$State=="IL",11]
sum(!is.na(outcome[outcome$State==state,11]))
sum(!is.na(outcome[outcome$State=="IL",11]))
names(outcome)
str(outcome[,11])
split<-split(outcome[outcome$State=="IL",11],outcome$Hospital.Name)
min(outcome[,11])
min(outcome[,11],rm.na=T)
?min
min(outcome[,11],na.rm=T)
source(best.R)
source("best.R")
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}
if(sum(is.na(data[data$State==state,col]))!=0){
## Return hospital name in that state with lowest 11
hospital-id<-which(min(data[data$State=state,col],na.rm=T))
return data[hospital-id,data$Hospital.Name]
}
else
stop("invalid state")
}
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}
if(sum(is.na(data[data$State==state,col]))!=0){
## Return hospital name in that state with lowest 11
hospital-id<-which(min(data[data$State=state,col],na.rm=T))
return data[hospital-id,data$Hospital.Name]
}
else{stop("invalid state")}
}
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}
if(sum(is.na(data[data$State==state,col]))!=0){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State=state,col],na.rm=T))
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}
if(sum(is.na(data[data$State==state,col]))!=0){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
source("best.R")
source("best.R")
best("TX","heart attack")
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(is.na(data[data$State==state,col]))!=0){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
best("TX","heart attack")
source("best.R")
best("TX","heart attack")
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(data[data$State==state,col]))==0){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
source("best.R")
best("TX","heart attack")
sum(!is.na(data[data$State==TX,11]))
sum(!is.na(data[data$State=="TX",11]))
best<-function(state,outcome){
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(data[data$State==state,col]))==0){
}
}
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
data[data$State=="TX",11]
is.na(data[data$State=="TX",11])
sum(is.na(data[data$State=="TX",11]))
as.numberic(data[data$State=="TX",11])
as.numeric(data[data$State=="TX",11])
!is.na(as.numeric(data[data$State=="TX",11]))
sum(!is.na(as.numeric(data[data$State=="TX",11])))
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(as.numeric(data[data$State==state,col]))==0){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(as.numeric(data[data$State==state,col]))==0)){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(as.numeric(data[data$State==state,col]))==0)){
## Return hospital name in that state with lowest 11
hospital_id<-which(min(data[data$State==state,col],na.rm=T))
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
source("best.R")
best("TX","heart attack")
min(data[data$State=="TX",11])
min(data[data$State=="TX",11],na.rm = T)
which(min(data[data$State=="TX",11],na.rm = T))
?which
which.min(data[data$State=="TX",11],na.rm = T))
which.min(data[data$State=="TX",11],na.rm = T)
which.min(data[data$State=="TX",11])
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(as.numeric(data[data$State==state,col]))==0)){
## Return hospital name in that state with lowest 11
hospital_id<-which.min(data[data$State==state,col])
return
data[hospital_id,data$Hospital.Name]
}
else{stop("invalid state")}
}
source("best.R")
best("TX","heart attack")
which.min(data[data$State=="TX",11])
id<-which.min(data[data$State=="TX",11])
id
data[id,data$Hospital.Name]
data$Hospital.Name[id]
# Function to find the best hospital in US
best<-function(state,outcome){
## Read outcome data
data<-read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",colClasses = "character")
## Check that state and outcome are valid
col<-{if(outcome=="heart attack"){11}
else if(outcome=="heart failure"){17}
else{23}}
if(sum(!is.na(as.numeric(data[data$State==state,col]))==0)){
## Return hospital name in that state with lowest 11
hospital_id<-which.min(data[data$State==state,col])
return
data$Hospital.Name[hospital_id]
}
else{stop("invalid state")}
}
source("best.R")
best("TX", "heart attack")
soure("best.R")
source("best.R")
best("TX", "heart attack")
